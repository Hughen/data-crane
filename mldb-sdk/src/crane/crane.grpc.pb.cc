// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: crane.proto

#include "crane.pb.h"
#include "crane.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace crane {

static const char* Crane_method_names[] = {
  "/crane.Crane/Open",
  "/crane.Crane/Prefetch",
};

std::unique_ptr< Crane::Stub> Crane::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Crane::Stub> stub(new Crane::Stub(channel));
  return stub;
}

Crane::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Open_(Crane_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Prefetch_(Crane_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Crane::Stub::Open(::grpc::ClientContext* context, const ::crane::OpenRequest& request, ::crane::OpenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Open_, context, request, response);
}

void Crane::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::crane::OpenRequest* request, ::crane::OpenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void Crane::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::crane::OpenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, std::move(f));
}

void Crane::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::crane::OpenRequest* request, ::crane::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

void Crane::Stub::experimental_async::Open(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::crane::OpenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Open_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crane::OpenResponse>* Crane::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::crane::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::crane::OpenResponse>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::crane::OpenResponse>* Crane::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::crane::OpenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::crane::OpenResponse>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, false);
}

::grpc::Status Crane::Stub::Prefetch(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::crane::PrefetchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Prefetch_, context, request, response);
}

void Crane::Stub::experimental_async::Prefetch(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::crane::PrefetchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Prefetch_, context, request, response, std::move(f));
}

void Crane::Stub::experimental_async::Prefetch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::crane::PrefetchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Prefetch_, context, request, response, std::move(f));
}

void Crane::Stub::experimental_async::Prefetch(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::crane::PrefetchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Prefetch_, context, request, response, reactor);
}

void Crane::Stub::experimental_async::Prefetch(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::crane::PrefetchResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Prefetch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::crane::PrefetchResponse>* Crane::Stub::AsyncPrefetchRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::crane::PrefetchResponse>::Create(channel_.get(), cq, rpcmethod_Prefetch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::crane::PrefetchResponse>* Crane::Stub::PrepareAsyncPrefetchRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::crane::PrefetchResponse>::Create(channel_.get(), cq, rpcmethod_Prefetch_, context, request, false);
}

Crane::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crane_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crane::Service, ::crane::OpenRequest, ::crane::OpenResponse>(
          [](Crane::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::crane::OpenRequest* req,
             ::crane::OpenResponse* resp) {
               return service->Open(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crane_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crane::Service, ::google::protobuf::Empty, ::crane::PrefetchResponse>(
          [](Crane::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::crane::PrefetchResponse* resp) {
               return service->Prefetch(ctx, req, resp);
             }, this)));
}

Crane::Service::~Service() {
}

::grpc::Status Crane::Service::Open(::grpc::ServerContext* context, const ::crane::OpenRequest* request, ::crane::OpenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crane::Service::Prefetch(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::crane::PrefetchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace crane

